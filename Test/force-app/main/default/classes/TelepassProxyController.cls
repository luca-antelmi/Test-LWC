/**
 * Created by remos on 27/09/21.
 */
/**
 * Created by remos on 21/09/21.
 */
public with sharing class TelepassProxyController{
	private static final String OPERATION_CODE = '0';
	private static final String OPERATION_SUBCODE = '0';
	private static final String CONTENT_TYPE = 'Content-Type';
	private static final String CONTENT_TYPE_VALUE = 'application/json';
	private static final String AUTHORIZATION = 'Authorization';
	private static final String AUTHORIZATION_PREFIX = 'Bearer ';
	public virtual class DocumentRepoResponse{
		@AuraEnabled
		public Integer agreementId{ get; set; }

		@AuraEnabled
		public Datetime insertionDate{ get; set; }

		@AuraEnabled
		public List<SingleDocumentRepo> documents{ get; set; }

		@AuraEnabled
		public List<ErrorRepoResponse> errors{ get; set; }

		public DocumentRepoResponse(){
			this.documents = new List<SingleDocumentRepo>();
			this.errors = new List<ErrorRepoResponse>();
		}

		public DocumentRepoResponse(Integer agreementId, DateTime insertionDate){
			this.agreementId = agreementId;
			this.insertionDate = insertionDate;
			this.documents = new List<SingleDocumentRepo>();
			this.errors = new List<ErrorRepoResponse>();
		}
	}

	public virtual class SingleDocumentRepo{
		@AuraEnabled
		public Integer agreementId{ get; set; }

		@AuraEnabled
		public Datetime insertionDate{ get; set; }

		@AuraEnabled
		public String document{ get; set; }

		@AuraEnabled
		public String description{ get; set; }

		@AuraEnabled
		public String userId{ get; set; }

		public SingleDocumentRepo(Integer agreementId, DateTime insertionDate, String document, String description, String userId){
			this.agreementId = agreementId;
			this.insertionDate = insertionDate;
			this.document = document;
			this.description = description;
			this.userId = userId;
		}
	}

	public virtual class InsertDocumentResponse{
		@AuraEnabled
		public Integer agreementId{ get; set; }

		@AuraEnabled
		public Datetime insertionDate{ get; set; }

		@AuraEnabled
		public List<ErrorRepoResponse> errors{ get; set; }

		public InsertDocumentResponse(){
		}

		public InsertDocumentResponse(Integer agreementId, DateTime insertionDate){
			this.agreementId = agreementId;
			this.insertionDate = insertionDate;
			this.errors = new List<ErrorRepoResponse>();
		}
	}

	public virtual class WrapperErrorRepoResponse{
		@AuraEnabled
		public List<ErrorRepoResponse> errors{ get; set; }

		public WrapperErrorRepoResponse(List<ErrorRepoResponse> errors){
			if (errors == null)
				this.errors = new List<ErrorRepoResponse>();
			this.errors = errors;
		}
	}

	public virtual class ErrorRepoResponse{
		@AuraEnabled
		public String code{ get; set; }

		@AuraEnabled
		public String message{ get; set; }

		@AuraEnabled
		public String field{ get; set; }

		public ErrorRepoResponse(String code, String message, String field){
			this.code = code;
			this.message = message;
			this.field = field;
		}
	}

	public virtual class InvalidPayloadException extends Exception{
	}

	public virtual class KcdErrorsResponseException extends Exception{
	}

	/**
	 * Ritorna al frontend un elenco di documenti filtrati per data e convenzione
	 * Delelga al metodo kcdCalloutRetrieveDocumentsAction l'esecuzione della chiamata REST API GET
	 * @param agreementId
	 * @param dataFiltro
	 *
	 * @return DocumentRepoResponse
	 */
	@AuraEnabled(cacheable = true)
	public static DocumentRepoResponse getDocumentsByDate(Integer agreementId, Date dataFiltro){
		if (dataFiltro == null)
			dataFiltro = Date.today();
		DocumentRepoResponse drr = kcdCalloutRetrieveDocumentsAction(agreementId, (DateTime) dataFiltro);
		return drr;
	}

	/**
	 * Ritorna al frontend il feedback relativo al caricamento di un nuovo documento nel repository.
	 * Delega il metodo kcdCalloutInsertDocumentAction per l'esecuzione della relativa REST POST.
	 *
	 * @param agreementId
	 * @param document
	 * @param description
	 * @param userId
	 *
	 * @return InsertDocumentResponse
	 */
	@AuraEnabled(cacheable = true)
	public static InsertDocumentResponse insertDocument(Integer agreementId, String document, String description, String userId){
		Map<String, String> requestPayload = new Map<String, String>();
		requestPayload.put('document', document);
		requestPayload.put('description', description);
		requestPayload.put('userId', userId);
		InsertDocumentResponse response = kcdCalloutInsertDocumentAction(agreementId, requestPayload);
		return response;
	}

	/**
	 * Intercetta la richiesta del frontend per la rimozione di un documento dal repository
	 * Delega il metodo kcdCalloutDismissionDocumentAction per l'esecuzione della azione di PUT
	 *
	 * @param agreementId
	 * @param userId
	 *
	 * @return List<ErrorRepoResponse>
	 */
	@AuraEnabled(cacheable = true)
	public static List<ErrorRepoResponse> dismissionDocument(Integer agreementId, DateTime insertionDate, String userId){
		Map<String, String> requestPayload = new Map<String, String>();
		String dateTimeString = String.valueOfGmt(insertionDate);
		requestPayload.put('userId', userId);
		requestPayload.put('insertionDate', dateTimeString.replace(' ', 'T'));
		return kcdCalloutDismissionDocumentAction(agreementId, requestPayload);
	}

	/**
	 * Chiama l'API REST:
	 * POST  - Inserimento Documento Contrattuale(MERCHANTOP-637)
	 *
	 * @param agreementId
	 * @param requestPayload
	 *
	 * @return InsertDocumentResponse
	 */
	private static InsertDocumentResponse kcdCalloutInsertDocumentAction(Integer agreementId, Map<String, String> requestPayload){
		InsertDocumentResponse result = new InsertDocumentResponse();
		Map<String, Object> responseMap = new Map<String, Object>();
		String endpoint = '/api-merchants/v1/agreements/' + agreementId + '/documents';
		String method = 'POST';
		String requestPayloadJson;
		try{
			requestPayloadJson = JSON.serialize(requestPayload);
			Http http = new Http();
			HttpRequest req = new HttpRequest();
			//String accessToken = JwtKCD.requestAccessToken();
			/* mocked call (start)*/
			JwtKCD auth = new JwtKCD();
			String accessToken = auth.requestAccessToken();
			/* mocked call (end)*/
			req.setMethod(method);
			req.setEndpoint(endpoint);
			req.setHeader(CONTENT_TYPE, CONTENT_TYPE_VALUE);
			req.setHeader(AUTHORIZATION, AUTHORIZATION_PREFIX + accessToken);
			if (requestPayloadJson == null || requestPayloadJson == '')
				throw new InvalidPayloadException('request payload non valido');
			req.setBody(requestPayloadJson);
			/* real Call & Response */
			//HttpResponse response = http.send(request);

			/* !!Mocked call & Response!! (start) */
			HttpResponse response = new HttpResponse();
			String dateTimeString = String.valueOfGmt(DateTime.now());
			system.debug('dateTimeString = ' + dateTimeString);
			Map<String, Object> serializedElements = new Map<String, Object>();
			serializedElements.put('agreementId', agreementId);
			serializedElements.put('insertionDate', dateTimeString.replace(' ', 'T'));
			response.setBody(System.JSON.serialize(serializedElements));
			system.debug('responseBody = ' + response.getBody());
			response.setStatusCode(200);
			/* !!Mocked call & Response!! (end) */

			if (response.getStatusCode() == 200){
				result = (InsertDocumentResponse)System.JSON.deserialize(response.getBody(), InsertDocumentResponse.class);
				if (result.errors != null && !result.errors.isEmpty())
					throw new KcdErrorsResponseException('errori kcd response');
			} else{
				// FIXME-RM popolare l'oggetto errors qui
				throw new KcdErrorsResponseException('errori kcd response: ' + response.getStatusCode());
			}
			//WriteLogCallout.createLog('ERROR', '', 'KCD_RestOutbound', OPERATION_CODE , OPERATION_SUBCODE,
			//     requestPayloadJson, response.getStatus(), 'KCD', OPERATION_CODE, OPERATION_SUBCODE, endpoint, method);

		} catch (Exception e){

			responseMap.put('esito = ', 901);
			responseMap.put('errorMsg = ', e.getMessage());

			// FIXME-RM bisogna scrivere sul file di log, ma come valorizziamo questi parametri?
			//WriteLogCallout.createLog('ERROR', '', 'KCD_RestOutbound', OPERATION_CODE , OPERATION_SUBCODE,
			//        requestPayloadJson, e.getMessage(), 'KCD', OPERATION_CODE, OPERATION_SUBCODE, endpoint, method);
		}

		return result;
	}

	/**
	 * Chiama l'API REST:
	 * PUT - Dismissione Documento Contrattuale(MERCHANTOP-639)
	 *
	 * @param agreementId
	 * @param requestPayload
	 *
	 * @return List<ErrorRepoResponse>
	 */
	private static List<ErrorRepoResponse> kcdCalloutDismissionDocumentAction(Integer agreementId, Map<String, String> requestPayload){
		HttpResponse response;
		List<ErrorRepoResponse> result = new List<ErrorRepoResponse>();
		Map<String, Object> responseMap = new Map<String, Object>();
		String endpoint = '/api-merchants/v1/agreements/' + agreementId + '/documents/lock';
		String method = 'PUT';
		String requestPayloadJson;
		try{
			requestPayloadJson = JSON.serialize(requestPayload);
			Http http = new Http();
			HttpRequest req = new HttpRequest();

			//String accessToken = JwtKCD.requestAccessToken();
			/* mocked call (start)*/
			JwtKCD auth = new JwtKCD();
			String accessToken = auth.requestAccessToken();
			/* mocked call (end)*/

			req.setMethod(method);
			req.setEndpoint(endpoint);
			req.setHeader(CONTENT_TYPE, CONTENT_TYPE_VALUE);
			req.setHeader(AUTHORIZATION, AUTHORIZATION_PREFIX + accessToken);
			if (requestPayloadJson == null || requestPayloadJson == '')
				throw new InvalidPayloadException('request payload non valido');
			req.setBody(requestPayloadJson);
			/* real Call & Response */
			//HttpResponse response = http.send(request);

			/* !!Mocked call & Response!! (start) */
			response = new HttpResponse();
			List<ErrorRepoResponse> errorsList = new List<ErrorRepoResponse>();
			if (agreementId == 100){
				errorsList.add(new ErrorRepoResponse('E100', 'descrizione Errore', 'field in errore'));
			}
			Map<String, Object> serializedElements = new Map<String, Object>();
			serializedElements.put('errors', errorsList);
			response.setBody(System.JSON.serialize(serializedElements));
			system.debug('responseBody = ' + response.getBody());
			response.setStatusCode(200);
			/* !!Mocked call & Response!! (end) */

			if (response.getStatusCode() == 200){
				WrapperErrorRepoResponse mapResult = (WrapperErrorRepoResponse)system.JSON.deserialize(response.getBody(), WrapperErrorRepoResponse.class);
				system.debug('mapResult = ' + mapResult.errors);
				if (mapResult != null && !mapResult.errors.isEmpty()){
					throw new KcdErrorsResponseException('errori kcd response');
				}
			} else{
				throw new KcdErrorsResponseException('errori kcd response: ' + response.getStatusCode());
			}
			//WriteLogCallout.createLog('ERROR', '', 'KCD_RestOutbound', OPERATION_CODE , OPERATION_SUBCODE,
			//requestPayloadJson, response.getStatus(), 'KCD', OPERATION_CODE, OPERATION_SUBCODE, endpoint, method);

		} catch (Exception e){

			responseMap.put('esito = ', 901);
			responseMap.put('errorMsg = ', e.getMessage());
			result.add(new ErrorRepoResponse('' + response.getStatusCode(), e.getMessage(), ''));

			//WriteLogCallout.createLog('ERROR', '', 'KCD_RestOutbound', OPERATION_CODE , OPERATION_SUBCODE,
			//        requestPayloadJson, e.getMessage(), 'KCD', OPERATION_CODE, OPERATION_SUBCODE, endpoint, method);
		}
		return result;
	}

	/**
	 * Chiama l'API REST:
	 * GET  - Recupero Documento Contrattuale(MERCHANTOP-640)
	 *
	 * @param agreementId
	 * @param requestPayload
	 *
	 * @return DocumentRepoResponse
	 */
	private static DocumentRepoResponse kcdCalloutRetrieveDocumentsAction(Integer agreementId, DateTime dataFiltro){
		HttpResponse response;
		Map<String, Object> responseMap = new Map<String, Object>();
		DocumentRepoResponse result = new DocumentRepoResponse();
		String insertionDate = String.valueOf(dataFiltro).replace(' ', 'T');
		String endpoint = '/api-merchants/v1/agreements/' + agreementId + '/documents?insertionDate=' + insertionDate;
		system.debug('endpoint = ' + endpoint);
		String method = 'GET';
		String requestPayloadJson;
		try{
			Http http = new Http();
			HttpRequest req = new HttpRequest();
			//String accessToken = JwtKCD.requestAccessToken();
			/* mocked call (start)*/
			JwtKCD auth = new JwtKCD();
			String accessToken = auth.requestAccessToken();
			/* mocked call (end)*/
			req.setMethod(method);
			req.setEndpoint(endpoint);
			req.setHeader(CONTENT_TYPE, CONTENT_TYPE_VALUE);
			req.setHeader(AUTHORIZATION, AUTHORIZATION_PREFIX + accessToken);
			/* real Call & Response */
			//HttpResponse response = http.send(request);

			/* !!Mocked call & Response!! (start) */
			response = new HttpResponse();
			DocumentRepoResponse docResponse = new DocumentRepoResponse(agreementId, dataFiltro);
			docResponse.documents.add(new SingleDocumentRepo(agreementId, dataFiltro, doc1, 'desc 1', '1'));
			docResponse.documents.add(new SingleDocumentRepo(agreementId, dataFiltro, doc2, 'desc 2', '1'));
            if (dataFiltro.date()<Date.today())
				docResponse.documents.add(new SingleDocumentRepo(agreementId, dataFiltro, doc3, 'desc 3', '1'));
			response.setBody(System.JSON.serialize(docResponse));
			system.debug('responseBody = ' + response.getBody());
			response.setStatusCode(200);
			/* !!Mocked call & Response!! (end) */

			if (response.getStatusCode() == 200){
				DocumentRepoResponse mapResult = (DocumentRepoResponse)system.JSON.deserialize(response.getBody(), DocumentRepoResponse.class);
				system.debug('mapResult.documents.size() = ' + mapResult.documents.size());
				if (mapResult != null && !mapResult.errors.isEmpty()){
					throw new KcdErrorsResponseException('errori kcd response');
				}
				result = mapResult;
			} else{
				throw new KcdErrorsResponseException('errori kcd response: ' + response.getStatusCode());
			}
			//WriteLogCallout.createLog('ERROR', '', 'KCD_RestOutbound', OPERATION_CODE , OPERATION_SUBCODE,
			//      requestPayloadJson, response.getStatus(), 'KCD', OPERATION_CODE, OPERATION_SUBCODE, endpoint, method);

		} catch (Exception e){

			responseMap.put('esito = ', 901);
			responseMap.put('errorMsg = ', e.getMessage());
			result.errors.add(new ErrorRepoResponse('' + response.getStatusCode(), e.getMessage(), ''));

			//WriteLogCallout.createLog('ERROR', '', 'KCD_RestOutbound', OPERATION_CODE , OPERATION_SUBCODE,
			//        requestPayloadJson, e.getMessage(), 'KCD', OPERATION_CODE, OPERATION_SUBCODE, endpoint, method);
		}
		return result;
	}

	public class JwtKCD{
		public String requestAccessToken(){
			return 'token JWT';
		}
	}

	public static final String doc1 = '';
	public static final String doc2 = '';
	public static final String doc3 = '';
}